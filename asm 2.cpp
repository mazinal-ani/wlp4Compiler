#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <unordered_map>
#include <set>
const std::string ALPHABET    = ".ALPHABET";
const std::string STATES      = ".STATES";
const std::string TRANSITIONS = ".TRANSITIONS";
const std::string INPUT       = ".INPUT";
const std::string EMPTY       = ".EMPTY";

std::set<char> alphabet;
std::set<std::string> states;
std::set<std::string> accepting_states;
std::unordered_map<std::string, std::unordered_map<char, std::string>> transitions;
std::string starting_state;

bool isChar(std::string s) {
  return s.length() == 1;
}
bool isRange(std::string s) {
  return s.length() == 3 && s[1] == '-';
}

unsigned char mips_dfa[] = {
  0x2e, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x0a, 0x24, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x2e, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x2c, 0x20, 0x28, 0x20, 0x29, 0x20, 0x3a, 0x20, 0x2d, 0x0a,
  0x2e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x53, 0x0a, 0x73, 0x74, 0x61, 0x72,
  0x74, 0x20, 0x24, 0x20, 0x72, 0x65, 0x67, 0x31, 0x21, 0x20, 0x72, 0x65,
  0x67, 0x32, 0x21, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x21, 0x20, 0x70,
  0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20,
  0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x21, 0x20, 0x69,
  0x64, 0x21, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x21, 0x20, 0x6c, 0x70,
  0x61, 0x72, 0x65, 0x6e, 0x21, 0x20, 0x72, 0x70, 0x61, 0x72, 0x65, 0x6e,
  0x21, 0x20, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x20, 0x64, 0x65, 0x63, 0x21,
  0x20, 0x7a, 0x65, 0x72, 0x6f, 0x21, 0x20, 0x70, 0x72, 0x65, 0x68, 0x65,
  0x78, 0x20, 0x68, 0x65, 0x78, 0x21, 0x0a, 0x2e, 0x54, 0x52, 0x41, 0x4e,
  0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x0a, 0x73, 0x74, 0x61, 0x72,
  0x74, 0x20, 0x24, 0x20, 0x24, 0x0a, 0x24, 0x20, 0x30, 0x2d, 0x39, 0x20,
  0x72, 0x65, 0x67, 0x31, 0x0a, 0x72, 0x65, 0x67, 0x31, 0x20, 0x30, 0x2d,
  0x39, 0x20, 0x72, 0x65, 0x67, 0x32, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
  0x20, 0x2c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x2e, 0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
  0x63, 0x74, 0x69, 0x76, 0x65, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x72,
  0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x64,
  0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x0a, 0x70, 0x72, 0x65,
  0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x0a,
  0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x2d,
  0x7a, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x0a,
  0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x69, 0x64,
  0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x69,
  0x64, 0x0a, 0x69, 0x64, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x69, 0x64, 0x0a,
  0x69, 0x64, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x69, 0x64, 0x0a, 0x69, 0x64,
  0x20, 0x30, 0x2d, 0x39, 0x20, 0x69, 0x64, 0x0a, 0x69, 0x64, 0x20, 0x3a,
  0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
  0x20, 0x28, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x0a, 0x73, 0x74,
  0x61, 0x72, 0x74, 0x20, 0x29, 0x20, 0x72, 0x70, 0x61, 0x72, 0x65, 0x6e,
  0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2d, 0x20, 0x6d, 0x69, 0x6e,
  0x75, 0x73, 0x0a, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x20, 0x31, 0x2d, 0x39,
  0x20, 0x64, 0x65, 0x63, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x30,
  0x20, 0x7a, 0x65, 0x72, 0x6f, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x31, 0x2d, 0x39, 0x20, 0x64, 0x65, 0x63, 0x0a, 0x64, 0x65, 0x63, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x64, 0x65, 0x63, 0x0a, 0x7a, 0x65, 0x72, 0x6f,
  0x20, 0x78, 0x20, 0x70, 0x72, 0x65, 0x68, 0x65, 0x78, 0x0a, 0x70, 0x72,
  0x65, 0x68, 0x65, 0x78, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x68, 0x65, 0x78,
  0x0a, 0x70, 0x72, 0x65, 0x68, 0x65, 0x78, 0x20, 0x61, 0x2d, 0x66, 0x20,
  0x68, 0x65, 0x78, 0x0a, 0x70, 0x72, 0x65, 0x68, 0x65, 0x78, 0x20, 0x41,
  0x2d, 0x46, 0x20, 0x68, 0x65, 0x78, 0x0a, 0x68, 0x65, 0x78, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x68, 0x65, 0x78, 0x0a, 0x68, 0x65, 0x78, 0x20, 0x61,
  0x2d, 0x66, 0x20, 0x68, 0x65, 0x78, 0x0a, 0x68, 0x65, 0x78, 0x20, 0x41,
  0x2d, 0x46, 0x20, 0x68, 0x65, 0x78, 0x0a
};
unsigned int mips_dfa_len = 595;

// Locations in the program that you should modify to store the
// DFA information have been marked with four-slash comments:
//// (Four-slash comment)
int main() {

  std::unordered_map<std::string, std::string> names;
  names.insert({"reg1", "REG"});
  names.insert({"reg2", "REG"});
  names.insert({"comma", "COMMA"});
  names.insert({"directive", "DIRECTIVE"});
  names.insert({"hex", "HEXINT"});
  names.insert({"label", "LABEL"});
  names.insert({"lparen", "LPAREN"});
  names.insert({"rparen", "RPAREN"});
  names.insert({"id", "ID"});
  names.insert({"zero", "DEC"});
  names.insert({"dec", "DEC"});

  std::string s;
  std::string foo((char *) mips_dfa, mips_dfa_len);
  std::stringstream in(foo);
  
  std::getline(in, s); // Alphabet section (skip header)
  // Read characters or ranges separated by whitespace
  while(in >> s) {
    if (s == STATES) { 
      break; 
    } else {
      if (isChar(s)) {
        alphabet.insert(char(s[0]));
      } else if (isRange(s)) {
        for(char c = s[0]; c <= s[2]; ++c) {
          alphabet.insert(c);
        }
      } 
    }
  }

  std::getline(in, s); // States section (skip header)
  // Read states separated by whitespace
  while(in >> s) {
    if (s == TRANSITIONS) { 
      break; 
    } else {
      static bool initial = true;
      bool accepting = false;
      if (s.back() == '!' && !isChar(s)) {
        accepting = true;
        s.pop_back();
      }
      if (initial) {
        starting_state = s;
        initial = false;
      }
      if (accepting) {
        accepting_states.insert(s);
      }
      states.insert(s);
      transitions[s];
    }
  }

  std::getline(in, s); // Transitions section (skip header)
  // Read transitions line-by-line
  while(std::getline(in, s)) {
    if (s == INPUT) { 
      // Note: Since we're reading line by line, once we encounter the
      // input header, we will already be on the line after the header
      break; 
    } else {
      std::string fromState, symbols, toState;
      std::istringstream line(s);
      std::vector<std::string> lineVec;
      while(line >> s) {
        lineVec.push_back(s);
      }
      fromState = lineVec.front();
      toState = lineVec.back();
      for(int i = 1; i < lineVec.size()-1; ++i) {
        std::string s = lineVec[i];
        if (isChar(s)) {
          symbols += s;
        } else if (isRange(s)) {
          for(char c = s[0]; c <= s[2]; ++c) {
            symbols += c;
          }
        }
      }
      for ( char c : symbols ) {
        if (alphabet.find(c) != alphabet.end() && states.find(fromState) != states.end() && states.find(toState) != states.end()) {
          transitions[fromState][c] = toState;
        }
      }
    }
  }

  std::istream& input = std::cin;
  while (std::getline(input, s)) {
    std::string lexeme = "";
    std::string curr_state = starting_state;
    std::istringstream iss(s);
    char c;

    // Input section (already skipped header)
    while (iss.get(c)) {
        if (lexeme.length() == 0 && c == ' ') continue;
        if (transitions.find(curr_state) != transitions.end() && transitions[curr_state].find(c) != transitions[curr_state].end()) {
            curr_state = transitions[curr_state][c];
            lexeme += c;
        }
        else {
            if (lexeme.length() > 0 && c != ' ') iss.putback (c);
            if (accepting_states.find(curr_state) != accepting_states.end()) std::cout << names[curr_state] << " " << lexeme << std::endl;
            else std::cerr << "ERROR" << std::endl;
            lexeme = "";
            curr_state = starting_state;
        }
    }
    if (accepting_states.find(curr_state) != accepting_states.end()) std::cout << names[curr_state] << " " << lexeme << std::endl;
    else if (lexeme.length() > 0) std::cerr << "ERROR" << std::endl;
  }
}